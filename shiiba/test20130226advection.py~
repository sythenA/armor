# copy - to be incorporated into the main code


# test template
# test 2013-2-25
# testing armor.advection.semiLagrangian. interpolate1 and interpolate2
# to follow Mr Liu Cheng Sin's suggestion, to map the difference between advected dbz chart
#   and the ground truth, to check where the residual lies, and to understand why 
#   the Rsquared is so low, e.g. for 20120612.0200 -0210 we got 0.028.

"""
how to run it:

cd /media/KINGSTON/ARMOR/2013/python

script testing/2013-2-25/test-interpolation/test1.log.txt
python 

 TEST RESULT:

"""


###########
#imports

import numpy as np
import numpy.ma as ma
from armor import pattern
from armor.shiiba import regression2 as regression
from armor.advection import semiLagrangian
sl = semiLagrangian
from imp import reload
import time
lsq = np.linalg.lstsq

time0= time.time()

def tic():
    global timeStart
    timeStart = time.time()

def toc():
    print "time spent:", time.time()-timeStart

dbz=pattern.DBZ

################
# set up

a = dbz('20120612.0200')
b = dbz('20120612.0210')

a.load()
b.load()

phi0 = a.matrix
phi1 = b.matrix

phi0
phi1
phi1-phi0

##################
# test
phi0.sharedmask #check

phi0.unshare_mask()
phi1.unshare_mask()

phi0.sharedmask #check
phi0.up     = np.roll(phi0, 1, axis=0)
phi0.down   = np.roll(phi0,-1, axis=0)
phi0.right  = np.roll(phi0, 1, axis=1)
phi0.left   = np.roll(phi0,-1, axis=1)
phi0.sharedmask            
phi0.left.sharedmask         #check
phi0.up.sharedmask

#masking the four edges
for v in [phi0.up, phi0.down, phi0.left, phi0.right]:
    v.mask[ :, 0]   = True
    v.mask[ :,-1]   = True
    v.mask[ 0, :]   = True
    v.mask[-1, :]   = True    

phi0.sharedmask            
phi0.left.sharedmask         #check
phi0.up.sharedmask
 
phi0.up
phi0.left

#########################################################################
# CENTRAL DIFFERENCE SCHEME

# preparing for the regression:  defining the X and Y
# advection equation:  
#  phi1-phi0 = -dt [ (u,v). ((phidown-phiup)/2dI, (phileft-phiright)/2dJ) - q]
# shiiba assumption:  u = c1*I+c2*J+c3, v=c4*I+c5*J+c6, q=c7*I+c8*J+c9
#  for simplicity we let dt=dI=dJ=1


print "\n=================================\nCentral difference scheme"
#xxx= raw_input('press enter:')


height, width = phi0.shape
X, Y = np.meshgrid(range(width), range(height))
I, J = Y, X

I = I.view(ma.MaskedArray)
J = J.view(ma.MaskedArray)
I.mask = None
J.mask = None

I
J

imageList = [phi0, phi1, phi0.up, phi0.down, phi0.left, phi0.right, I, J]
mask = phi0.mask


#
# get the union of masks...
#

for v in imageList:
    mask += v.mask

# ... and share it
for v in imageList:
    v.mask = mask

phi0, phi1, phi0.up, phi0.down, phi0.left, phi0.right, I, J


#
#  
######################################################################

#################################################################################
#
# and compress the data into one dim before we do further computation.
# the two-dimensional structure is no longer needed.
#
phi0.sharedmask  # check
phi1.sharedmask

phi         =phi0.compressed()		# compressing phi0 into 1-dimensional phi
phi_next    =phi1.compressed()		# same
phiup       =phi0.up.compressed() 
phidown     =phi0.down.compressed()
phileft     =phi0.left.compressed()
phiright    =phi0.right.compressed()
I = I.compressed()
J = J.compressed()

xxx = np.vstack([phi, phi_next, phiup, phidown, phileft, phiright, I, J])   #test
xxx[:,:10]
xxx[:,10:20]
xxx[:,20:]

regressand = phi_next - phi
A = -(phidown-phiup)/2
B = -(phileft-phiright)/2
regressor = np.zeros((9, len(regressand)))  # c1; c2; ... c9  one row for each coeff

regressor[0,:] = A*I
regressor[1,:] = A*J
regressor[2,:] = A
regressor[3,:] = B*I
regressor[4,:] = B*J
regressor[5,:] = B
regressor[6,:] = I
regressor[7,:] = J
regressor[8,:] = 1

regressor[:,:10]
regressor[:,10:20]
regressor[:,20:]


C, residual, rank, s = lsq(regressor.T, regressand)
residual = residual[0]

SStotal = regressand.var() * len(regressand)
Rsquared = 1 - residual/SStotal
C
Rsquared

#
# the above - large done on 21-22 Feb 2013
######################################################################

#########################################################################
# UPWIND SCHEME   - 23 Feb 2013

# preparing for the regression:  defining the X and Y
# advection equation:  
#  phi1-phi0 = -dt [   (u,v)  . ((phidown-phiup)/2dI, (phileft-phiright)/2dJ) - q +
#                     upWindCorrectionTerm], 
#  where upWindCorrectionTerm 
#            =     (|u|,|v|). ((2phi-phidown-phiup)/2dI, (2phi-phileft-phiright)/2dJ)
#
# shiiba assumption:  u = c1*I+c2*J+c3, v=c4*I+c5*J+c6, q=c7*I+c8*J+c9
#  for simplicity we let dt=dI=dJ=1


print "\n=================================\nupWInd scheme"
#xxx= raw_input('press enter:')


###############################
# upWind scheme parameters
convergenceMark = 0.000000001

C_ =  np.arange(9)*999      #just some random initialisation
loopCount = 0
while abs(C_-C).sum() > convergenceMark:
    loopCount +=1
    c1, c2, c3, c4, c5, c6, c7, c8, c9 = C    
    C_ = C                      # keeping the old C
    U0 = c1*I + c2*J + c3
    V0 = c4*I + c5*J + c6
    # q  = c7*I + c8*J + c9   # just in case it's needed
    # In the following, dI=dJ=dt = 1 for simplicity    
    upWindCorrectionTerm = abs(U0)*(2*phi-phidown-phiup)/2 + abs(V0)*(2*phi-phileft-phiright)/2
    regressand = phi_next - phi + upWindCorrectionTerm
    # regressor unchanged - see equation (4.3) on p.32, annual report, december 2012
    C, residual, rank, s = lsq(regressor.T, regressand)
    residual = residual[0]
    SStotal = regressand.var() * len(regressand)
    Rsquared = 1 - residual/SStotal
    print "\n-------------------------------\n"
    print "Loop:", loopCount
    print "abs(C_-C).sum():", abs(C_-C).sum()
    print "Rsquared:", Rsquared
    print "shiiba coeffs:", C
    print "upWindCorrectionTerm: (", len(upWindCorrectionTerm), ")",upWindCorrectionTerm, 

##################################
# Shiiba regression results
print "\n\n\n=============== Shiiba regression results ===================\n\n"

Rsquared
phi0
phi1
C
Rsquared

#####################################
# interpolation

vect1   = regression.convert(C, a)
vect1.show()
tic()
a1  = sl.interpolate2(a, vect1)
toc()
a1.show()

diff    = b-a1
diff.show()
print diff.matrix.max()
print diff.matrix.min()
print diff.matrix.mean()
print diff.matrix.var()



