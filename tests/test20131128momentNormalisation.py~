'''
from armor.tests import test20131128momentNormalisation as t
reload(t)
t.main()

from armor import pattern ; from armor.tests import test20131128momentNormalisation as t 
reload(pattern) ; reload(t) ; x= t.main2()
import matplotlib.pyplot as plt

x = [v[0] for v in corrStats if v[0]<=43200]     # max time diff: half a day
y = [v[1] for v in corrStats if v[0]<=43200]
plt.plot(x, y)
plt.show()          

'''
import time
import pickle
import numpy as np
from matplotlib import pyplot as plt
import pylab
from armor import pattern
from armor import objects3 as ob
reload(pattern)
reload(ob)


#timeString = str(int(time.time()))
#ds  = ob.kongrey
def main(ds=ob.kongrey):
    timeString = str(int(time.time()))
    print "========================================"
    print 'OUTPUTS TO:   /home/k/ARMOR/python/testing/corrStats'+ timeString + '.pydump'
    L   = len(ds)
    while True:
        i, j = np.random.random(2)
        i = int(i * L)
        j = int(j * L)
        k1 = ds[i]
        k2 = ds[j]
        k1.load()
        k2.load()
        k1.setThreshold(0)
        k2.setThreshold(0)
        thres = 5 * int(5 * np.random.random() + 1)     # 5, 10, ... 30
        sigma = 20 * int(3 * np.random.random()+1)      # 20, 40, 60, 80
        k1.gaussianCorr(k2, sigma=sigma, thres=thres, saveImage=True, outputFolder='/home/k/ARMOR/python/testing/')

def main2(ds=ob.monsoon):
    timeString = str(int(time.time()))
    ds.load()
    ds.setThreshold(0)
    L   = len(ds)

    count=0     # stats
    corrStats = []     # stats  - to plot the correlations against the time difference
    while count<100:
        i, j = np.random.random(2)
        i = int(i * L)
        j = int(j * L)
        if i == j:
            continue
        k1 = ds[i]
        k2 = ds[j]
        thres   = 5 * int(5 * np.random.random() + 1)     # 5, 10, ... 30
        sigma   = 20 * int(3 * np.random.random()+1)      # 20, 40, 60, 80
        print '\n================================================'
        print count, '.',  'thres, sigma:', thres, sigma
        print k1.name, k2.name
        timeDelta   = k1.datetime() - k2.datetime()
        days        = timeDelta.days
        seconds     = timeDelta.seconds
        timeDiff    = abs(days*86400 + seconds)
        print 'timeDiff (seconds):', timeDiff
        if timeDiff > 43200:
            continue
        try:
            corr    = k1.gaussianCorr(k2, sigma=sigma, thres=thres, saveImage=True, outputFolder='/home/k/ARMOR/python/testing/')
        except:
            print 'Error!'
            continue
        print 'RESULT:  timeDiff, corr:', timeDiff,corr
        corrStats.append( (timeDiff, corr, sigma, thres) )
        count+=1
        #if count % 10 == 0:
        #    print "sleeping 2 seconds"
        #    time.sleep(2)
        #    corrStats.sort()
        #    x = [v[0] for v in corrStats if v[0]<=43200]     # max time diff: half a day
        #    y = [v[1] for v in corrStats if v[0]<=43200]
        #    plt.plot(x, y)
        #    plt.show()          
        #    print 'sleeping 20 seconds'
        #    time.sleep(20)
        corrStats.sort()
        pickle.dump(corrStats, open('/home/k/ARMOR/python/testing/corrStats'+ timeString + '.pydump', 'w'))
    return corrStats
    
def plotCorrStats(corrStats=0, filePath='', sigma="", thres=""):
    if isinstance(corrStats, str):
        filePath=corrStats
        corrStats = pickle.load(open(filePath))
    if corrStats==0:
        corrStats = pickle.load(open(filePath))
    corrStats.sort()

    if sigma!="":
        corrStats = [v for v in corrStats if v[2]==sigma]
    if thres!='':
        corrStats = [v for v in corrStats if v[3]==thres]
        
    x = np.array([v[0] for v in corrStats])
    y = np.array([v[1] for v in corrStats])
    m,b = pylab.polyfit(x, y, 1)  # http://stackoverflow.com/questions/6148207/linear-regression-with-matplotlib

    plt.plot(x, y, 'ro', x, m*x+b, '--k')
    #plt.errorbar(x, m*x+b, (m*x+b-y) - ((m*x+b-y)>0.1)*((m*x+b-y)-0.1) + ((m*x+b-y)<-0.1)*(-0.1-(m*x+b-y)) )
    plt.errorbar(x, m*x+b, (m*x+b-y) - ((m*x+b-y)>0.1)*((m*x+b-y)-0.1) )
    plt.title('Gaussian Normalised Correlation\nversus\nTime Difference of Two DBZ patterns (seconds)')
    #plt.show()
    

